name: Nh·∫≠t K√Ω T·ª± ƒê·ªông H√≥a H√†ng Ng√†y

on:
  # schedule:
    # Ch·∫°y v√†o 00:05 s√°ng gi·ªù Vi·ªát Nam (t·ª©c 17:05 UTC ng√†y h√¥m tr∆∞·ªõc)
    # - cron: '5 17 * * *'
    # Ch·∫°y v√†o 12:05 tr∆∞a gi·ªù Vi·ªát Nam (t·ª©c 05:05 UTC c√πng ng√†y)
    # - cron: '5 5 * * *'
  workflow_dispatch: # Ch·ªâ cho ph√©p ch·∫°y th·ªß c√¥ng

permissions:
  contents: write

concurrency:
  group: daily-note
  cancel-in-progress: true

jobs:
  create-daily-note:
    runs-on: ubuntu-latest
    env:
      CITY: "Ho Chi Minh"
      LAT: "10.82"
      LON: "106.63"
      TZ: Asia/Ho_Chi_Minh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 selenium

      - name: Install Chrome and ChromeDriver
        run: |
          # C√†i ƒë·∫∑t Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # ChromeDriver s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông qu·∫£n l√Ω b·ªüi Selenium 4.x
          echo "Chrome version: $(google-chrome --version)"

      - name: C·∫≠p nh·∫≠t n·ªôi dung t·ª± ƒë·ªông
        id: update_file
        shell: bash
        run: |
          # Ph·∫ßn c√≤n l·∫°i c·ªßa script bash gi·ªØ nguy√™n y nh∆∞ c≈©
          set -euo pipefail
          
          today=$(date +%F)
          current_hour=$(date +%H)
          
          # X√°c ƒë·ªãnh th·ªùi ƒëi·ªÉm ch·∫°y v√† t·∫°o t√™n file ph√π h·ª£p
          if [ "$current_hour" -ge 0 ] && [ "$current_hour" -lt 12 ]; then
            time_suffix="12AM"
            display_time="00:05 s√°ng"
          else
            time_suffix="12PM" 
            display_time="12:05 tr∆∞a"
          fi
          
          output_dir="DailyNotes"
          mkdir -p "$output_dir"
          file="$output_dir/$today-$time_suffix.md"
          
          echo "üìù T·∫°o file nh·∫≠t k√Ω: $file (ch·∫°y l√∫c $display_time)"

          if ! command -v jq >/dev/null 2>&1 || ! command -v bc >/dev/null 2>&1; then
            echo "Installing missing tools (jq, bc)..."
            sudo apt-get update -y && sudo apt-get install -y jq bc
          fi

          function append_header() {
            if [ ! -f "$file" ]; then
              printf '# üöÄ Nh·∫≠t K√Ω T·ª± ƒê·ªông H√≥a - %s (%s)\n' "$today" "$display_time" > "$file"
              printf '\n*File ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông l√∫c %s*\n' "$display_time" >> "$file"
            fi
          }
          function append_calendar() {
            if ! grep -q '' "$file"; then
              dow_num=$(date +%u); case "$dow_num" in 1) dow="Th·ª© Hai" ;; 2) dow="Th·ª© Ba" ;; 3) dow="Th·ª© T∆∞" ;; 4) dow="Th·ª© NƒÉm" ;; 5) dow="Th·ª© S√°u" ;; 6) dow="Th·ª© B·∫£y" ;; 7) dow="Ch·ªß Nh·∫≠t" ;; esac
              iso_week=$(date +%V); day_of_year=$(date +%j)
              { echo; echo "---"; echo ""; echo "## üóìÔ∏è L·ªãch H√¥m Nay"; echo "- **Ng√†y**: $today ($dow)"; echo "- **Tu·∫ßn (ISO)**: $iso_week / **Ng√†y trong nƒÉm**: $day_of_year"; } >> "$file"
            fi
          }
          function append_holiday_check() {
            if ! grep -q '' "$file"; then
              status_code=$(curl -o /dev/null -s -w "%{http_code}" "https://date.nager.at/api/v3/IsTodayPublicHoliday/VN" || true)
              holiday_info=""
              if [ "$status_code" -eq 200 ]; then
                holiday_info="- **Th√¥ng b√°o**: üéâ H√¥m nay l√† m·ªôt ng√†y ngh·ªâ l·ªÖ t·∫°i Vi·ªát Nam."
              elif [ "$status_code" -eq 204 ]; then
                holiday_info="- **Th√¥ng b√°o**: H√¥m nay kh√¥ng ph·∫£i l√† ng√†y ngh·ªâ l·ªÖ."
              fi
              if [ -n "$holiday_info" ]; then
                { echo; echo ""; echo "## üáªüá≥ Ng√†y L·ªÖ Vi·ªát Nam"; echo "$holiday_info"; } >> "$file"
              fi
            fi
          }
          function append_weather_and_uv() {
            if ! grep -q '' "$file"; then
              wjson=$(curl -fsSL "https://api.open-meteo.com/v1/forecast?latitude=${LAT}&longitude=${LON}&current_weather=true&daily=uv_index_max&timezone=Asia%2FHo_Chi_Minh" || true)
              if [ -n "$wjson" ] && echo "$wjson" | jq -e . >/dev/null 2>&1; then
                temp=$(echo "$wjson" | jq -r '.current_weather.temperature // empty'); wind=$(echo "$wjson" | jq -r '.current_weather.windspeed // empty');
                uv_index=$(echo "$wjson" | jq -r '.daily.uv_index_max[0] // empty' | cut -d'.' -f1)
                uv_desc="Kh√¥ng x√°c ƒë·ªãnh"
                if [ -n "$uv_index" ]; then
                    if (( uv_index <= 2 )); then uv_desc="üü¢ Th·∫•p - Kh√¥ng c·∫ßn b·∫£o v·ªá"
                    elif (( uv_index <= 5 )); then uv_desc="üü° Trung b√¨nh - Che n·∫Øng"
                    elif (( uv_index <= 7 )); then uv_desc="üü† Cao - C·∫ßn b√¥i kem ch·ªëng n·∫Øng"
                    elif (( uv_index <= 10 )); then uv_desc="üî¥ R·∫•t cao - H·∫°n ch·∫ø ra ngo√†i"
                    else uv_desc="üü£ C·ª±c k·ª≥ cao - Tr√°nh ra ngo√†i tr·ªùi"
                    fi
                fi
                { echo; echo "---"; echo ""; echo "## üå§Ô∏è Th·ªùi ti·∫øt & Ch·ªâ s·ªë UV t·∫°i ${CITY}"; echo "- **Nhi·ªát ƒë·ªô**: ${temp}¬∞C / **Gi√≥**: ${wind} km/h"; if [ -n "$uv_index" ]; then echo "- **Ch·ªâ s·ªë UV**: $uv_index ($uv_desc)"; fi; } >> "$file"
              fi
            fi
          }
          function append_financial_data() {
            if ! grep -q '<!-- FINANCE-MODULE -->' "$file"; then
              ratejson=$(curl --connect-timeout 5 -fsSL "https://open.er-api.com/v6/latest/USD" || true)
              usd_vnd_rate="ƒêang c·∫≠p nh·∫≠t..."
              if [ -n "$ratejson" ] && echo "$ratejson" | jq -e . >/dev/null 2>&1; then 
                rate_raw=$(echo "$ratejson" | jq -r '.rates.VND')
                if [ -n "$rate_raw" ] && [ "$rate_raw" != "null" ]; then 
                  usd_vnd_rate=$(printf "%.0f" "$rate_raw")
                fi
              fi
              { echo; echo "---"; echo "<!-- FINANCE-MODULE -->"; echo "## üí∞ T·ª∑ Gi√° Ngo·∫°i T·ªá"; echo "- **T·ª∑ gi√° USD/VND**: 1 USD ‚âà $usd_vnd_rate VND"; echo; echo "*Gi√° v√†ng chi ti·∫øt xem ph·∫ßn PNJ b√™n d∆∞·ªõi*"; } >> "$file"
            fi
          }
          function append_pnj_gold() {
            if ! grep -q '<!-- PNJ-GOLD-MODULE -->' "$file"; then
              echo "üîç ƒêang crawl gi√° v√†ng t·ª´ PNJ b·∫±ng Selenium..."
              local pnj_output_file="pnj_gold_prices.md"
              
              # ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ Selenium ho·∫°t ƒë·ªông trong headless mode
              export DISPLAY=:99
              
              # Ch·∫°y script crawl gi√° v√†ng v·ªõi timeout
              timeout 60s python get_gold_price.py "$pnj_output_file" || {
                echo "‚ö†Ô∏è Timeout ho·∫∑c l·ªói khi crawl gi√° v√†ng PNJ"
                echo "# B·∫£ng Gi√° V√†ng PNJ" > "$pnj_output_file"
                echo "*Kh√¥ng th·ªÉ crawl d·ªØ li·ªáu v√†o l√∫c n√†y do timeout ho·∫∑c l·ªói k·ªπ thu·∫≠t*" >> "$pnj_output_file"
              }
              
              if [ -s "$pnj_output_file" ]; then
                { echo; echo "---"; echo "<!-- PNJ-GOLD-MODULE -->"; echo "## ‚öúÔ∏è B·∫£ng Gi√° V√†ng PNJ Chi Ti·∫øt"; echo; cat "$pnj_output_file"; } >> "$file"
                echo "‚úÖ ƒê√£ th√™m b·∫£ng gi√° v√†ng PNJ v√†o nh·∫≠t k√Ω"
              else
                { echo; echo "---"; echo "<!-- PNJ-GOLD-MODULE -->"; echo "## ‚öúÔ∏è B·∫£ng Gi√° V√†ng PNJ Chi Ti·∫øt"; echo "‚ùå Kh√¥ng th·ªÉ crawl d·ªØ li·ªáu gi√° v√†ng PNJ v√†o l√∫c n√†y."; echo "Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra [tr·ª±c ti·∫øp t·∫°i PNJ](https://www.pnj.com.vn/site/gia-vang)"; } >> "$file"
                echo "‚ö†Ô∏è Kh√¥ng th·ªÉ crawl gi√° v√†ng, ƒë√£ th√™m th√¥ng b√°o l·ªói"
              fi
              
              # D·ªçn d·∫πp file t·∫°m
              [ -f "$pnj_output_file" ] && rm "$pnj_output_file"
            fi
          }
          function append_crypto_prices() { if ! grep -q '' "$file"; then COIN_IDS="bitcoin,ethereum,solana,binancecoin,ripple,dogecoin,tether"; cryptojson=$(curl -fsSL "https://api.coingecko.com/api/v3/simple/price?ids=${COIN_IDS}&vs_currencies=usd" || true); if [ -n "$cryptojson" ] && echo "$cryptojson" | jq -e . >/dev/null 2>&1; then output=""; btc_price_raw=$(echo "$cryptojson" | jq -r '.bitcoin.usd'); if [ -n "$btc_price_raw" ] && [ "$btc_price_raw" != "null" ]; then btc_price=$(printf "%.2f" "$btc_price_raw"); output+="- **Bitcoin (BTC)**: \$${btc_price} USD\n"; fi; eth_price_raw=$(echo "$cryptojson" | jq -r '.ethereum.usd'); if [ -n "$eth_price_raw" ] && [ "$eth_price_raw" != "null" ]; then eth_price=$(printf "%.2f" "$eth_price_raw"); output+="- **Ethereum (ETH)**: \$${eth_price} USD\n"; fi; sol_price_raw=$(echo "$cryptojson" | jq -r '.solana.usd'); if [ -n "$sol_price_raw" ] && [ "$sol_price_raw" != "null" ]; then sol_price=$(printf "%.2f" "$sol_price_raw"); output+="- **Solana (SOL)**: \$${sol_price} USD\n"; fi; bnb_price_raw=$(echo "$cryptojson" | jq -r '.binancecoin.usd'); if [ -n "$bnb_price_raw" ] && [ "$bnb_price_raw" != "null" ]; then bnb_price=$(printf "%.2f" "$bnb_price_raw"); output+="- **BNB**: \$${bnb_price} USD\n"; fi; xrp_price_raw=$(echo "$cryptojson" | jq -r '.ripple.usd'); if [ -n "$xrp_price_raw" ] && [ "$xrp_price_raw" != "null" ]; then xrp_price=$(printf "%.4f" "$xrp_price_raw"); output+="- **XRP**: \$${xrp_price} USD\n"; fi; doge_price_raw=$(echo "$cryptojson" | jq -r '.dogecoin.usd'); if [ -n "$doge_price_raw" ] && [ "$doge_price_raw" != "null" ]; then doge_price=$(printf "%.4f" "$doge_price_raw"); output+="- **Dogecoin (DOGE)**: \$${doge_price} USD\n"; fi; usdt_price_raw=$(echo "$cryptojson" | jq -r '.tether.usd'); if [ -n "$usdt_price_raw" ] && [ "$usdt_price_raw" != "null" ]; then usdt_price=$(printf "%.4f" "$usdt_price_raw"); output+="- **Tether (USDT)**: \$${usdt_price} USD\n"; fi; output=$(echo -e "${output}" | sed '/^$/d'); { echo; echo "---"; echo ""; echo "## üìà Gi√° Ti·ªÅn M√£ H√≥a"; echo -e "$output"; } >> "$file"; fi; fi; }
          function append_iss_location() { if ! grep -q '' "$file"; then issjson=$(curl -fsSL "http://api.open-notify.org/iss-now.json" || true); if [ -n "$issjson" ] && echo "$issjson" | jq -e . >/dev/null 2>&1; then lat=$(echo "$issjson" | jq -r '.iss_position.latitude'); lon=$(echo "$issjson" | jq -r '.iss_position.longitude'); geo_json=$(curl -fsSL "https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=en" || true); location="Tr√™n ƒë·∫°i d∆∞∆°ng ho·∫∑c khu v·ª±c kh√¥ng x√°c ƒë·ªãnh"; if [ -n "$geo_json" ] && echo "$geo_json" | jq -e . >/dev/null 2>&1; then country=$(echo "$geo_json" | jq -r '.countryName // empty'); city=$(echo "$geo_json" | jq -r '.city // empty'); principalSubdivision=$(echo "$geo_json" | jq -r '.principalSubdivision // empty'); if [ -n "$country" ]; then location="$country"; if [ -n "$principalSubdivision" ]; then location="$principalSubdivision, $location"; fi; if [ -n "$city" ]; then location="$city, $location"; fi; fi; fi; { echo; echo "---"; echo ""; echo "## üõ∞Ô∏è V·ªã Tr√≠ Tr·∫°m ISS"; echo "- **V·ªã tr√≠ hi·ªán t·∫°i**: $location"; echo "- **T·ªça ƒë·ªô**: $lat, $lon"; } >> "$file"; fi; fi; }
          function append_rocket_launch() { if ! grep -q '' "$file"; then launchjson=$(curl -fsSL "https://ll.thespacedevs.com/2.2.0/launch/upcoming/?limit=1" || true); if [ -n "$launchjson" ] && echo "$launchjson" | jq -e '.results | length > 0' >/dev/null 2>&1; then launch=$(echo "$launchjson" | jq '.results[0]'); name=$(echo "$launch" | jq -r '.name'); mission=$(echo "$launch" | jq -r '.mission.name'); iso_date=$(echo "$launch" | jq -r '.window_start'); launch_time=$(date -d "$iso_date" +"%d/%m/%Y, %H:%M (Gi·ªù Vi·ªát Nam)"); { echo; echo "---"; echo ""; echo "## üöÄ L·ªãch Ph√≥ng T√™n L·ª≠a"; echo "- **T√™n l·ª≠a**: $name"; echo "- **Nhi·ªám v·ª•**: $mission"; echo "- **Th·ªùi gian d·ª± ki·∫øn**: $launch_time"; } >> "$file"; fi; fi; }
          function append_advice() { if ! grep -q '' "$file"; then advice_en_json=$(curl -fsSL "https://api.adviceslip.com/advice" || true); if [ -n "$advice_en_json" ] && echo "$advice_en_json" | jq -e . >/dev/null 2>&1; then advice_en=$(echo "$advice_en_json" | jq -r '.slip.advice'); advice_vi="$advice_en"; advice_en_encoded=$(echo "$advice_en" | sed 's/ /%20/g'); translation_json=$(curl -fsSL "https://api.mymemory.translated.net/get?q=${advice_en_encoded}&langpair=en|vi" || true); if [ -n "$translation_json" ] && echo "$translation_json" | jq -e . >/dev/null 2>&1; then translated_text=$(echo "$translation_json" | jq -r '.responseData.translatedText'); if [ -n "$translated_text" ] && [ "$translated_text" != "NO QUERY SPECIFIED!" ] && [ "$translated_text" != "$advice_en" ]; then advice_vi="$translated_text"; fi; fi; { echo; echo "---"; echo ""; echo "## üí° L·ªùi khuy√™n ng·∫Øn"; echo "> $advice_vi"; } >> "$file"; fi; fi; }
          function append_numbers_fact() { if ! grep -q '' "$file"; then numjson_en=$(curl -fsSL "http://numbersapi.com/random/trivia?json" || true); if [ -n "$numjson_en" ] && echo "$numjson_en" | jq -e . >/dev/null 2>&1; then fact_en=$(echo "$numjson_en" | jq -r '.text'); fact_vi="$fact_en"; fact_en_encoded=$(echo "$fact_en" | sed 's/ /%20/g'); translation_json=$(curl -fsSL "https://api.mymemory.translated.net/get?q=${fact_en_encoded}&langpair=en|vi" || true); if [ -n "$translation_json" ] && echo "$translation_json" | jq -e . >/dev/null 2>&1; then translated_text=$(echo "$translation_json" | jq -r '.responseData.translatedText'); if [ -n "$translated_text" ] && [ "$translated_text" != "NO QUERY SPECIFIED!" ] && [ "$translated_text" != "$fact_en" ]; then fact_vi="$translated_text"; fi; fi; { echo; echo "---"; echo ""; echo "## #Ô∏è‚É£ S·ª± Th·∫≠t V·ªÅ Con S·ªë"; echo "> $fact_vi"; } >> "$file"; fi; fi; }
          function append_stoic_quote() { if ! grep -q '' "$file"; then stoicjson=$(curl -fsSL "https://stoic-quotes.com/api/quote" || true); if [ -n "$stoicjson" ] && echo "$stoicjson" | jq -e . >/dev/null 2>&1; then quote_en=$(echo "$stoicjson" | jq -r '.quote'); author=$(echo "$stoicjson" | jq -r '.author'); if [ -n "$quote_en" ] && [ "$quote_en" != "null" ]; then quote_vi="$quote_en"; quote_en_encoded=$(echo "$quote_en" | sed 's/ /%20/g'); translation_json=$(curl -fsSL "https://api.mymemory.translated.net/get?q=${quote_en_encoded}&langpair=en|vi" || true); if [ -n "$translation_json" ] && echo "$translation_json" | jq -e . >/dev/null 2>&1; then translated_text=$(echo "$translation_json" | jq -r '.responseData.translatedText'); if [ -n "$translated_text" ] && [ "$translated_text" != "NO QUERY SPECIFIED!" ] && [ "$translated_text" != "$quote_en" ]; then quote_vi="$translated_text"; fi; fi; { echo; echo "---"; echo ""; echo "## üèõÔ∏è Tri·∫øt L√Ω Stoic"; echo "> $quote_vi"; echo ">"; echo "> ‚Äî ***$author***"; } >> "$file"; fi; fi; fi; }
          function append_footer() {
            if ! grep -q '' "$file"; then
              { echo; echo "---"; echo ""; echo "> *Ghi ch√∫ n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi [GitHub Actions](https://github.com/features/actions).*" ; } >> "$file"
            fi
          }

          echo "B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t file: $file"
          append_header
          append_calendar
          append_holiday_check
          append_weather_and_uv
          append_financial_data
          append_pnj_gold
          append_crypto_prices
          append_iss_location
          append_rocket_launch
          append_numbers_fact
          append_advice
          append_stoic_quote
          append_footer
          echo "Ho√†n th√†nh c·∫≠p nh·∫≠t n·ªôi dung."
          
          git add "$file"
          
          echo "ƒêang t·∫°o t√≥m t·∫Øt cho Discord..."
          wjson_discord=$(curl -fsSL "https://api.open-meteo.com/v1/forecast?latitude=${LAT}&longitude=${LON}&current_weather=true&daily=uv_index_max&timezone=Asia%2FHo_Chi_Minh" || true)
          weather_line="Th·ªùi ti·∫øt: ƒêang c·∫≠p nh·∫≠t..."; uv_line="Ch·ªâ s·ªë UV: ƒêang c·∫≠p nh·∫≠t..."
          if [ -n "$wjson_discord" ] && echo "$wjson_discord" | jq -e . >/dev/null 2>&1; then temp=$(echo "$wjson_discord" | jq -r '.current_weather.temperature // empty'); wind=$(echo "$wjson_discord" | jq -r '.current_weather.windspeed // empty'); weather_line="Nhi·ªát ƒë·ªô: ${temp}¬∞C, gi√≥ ${wind} km/h"; uv_index=$(echo "$wjson_discord" | jq -r '.daily.uv_index_max[0] // empty' | cut -d'.' -f1); if [ -n "$uv_index" ]; then uv_desc=""; if (( uv_index <= 2 )); then uv_desc="Th·∫•p"; elif (( uv_index <= 5 )); then uv_desc="Trung b√¨nh"; elif (( uv_index <= 7 )); then uv_desc="Cao"; elif (( uv_index <= 10 )); then uv_desc="R·∫•t cao"; else uv_desc="C·ª±c k·ª≥ cao"; fi; uv_line="Cao nh·∫•t: $uv_index ($uv_desc)"; fi; fi
          advice_discord_json=$(curl -fsSL "https://api.adviceslip.com/advice" || true)
          advice_line="H√¥m nay l√† m·ªôt ng√†y tuy·ªát v·ªùi!"
          if [ -n "$advice_discord_json" ] && echo "$advice_discord_json" | jq -e . >/dev/null 2>&1; then advice_en=$(echo "$advice_discord_json" | jq -r '.slip.advice'); advice_vi="$advice_en"; advice_en_encoded=$(echo "$advice_en" | sed 's/ /%20/g'); translation_json=$(curl -fsSL "https://api.mymemory.translated.net/get?q=${advice_en_encoded}&langpair=en|vi" || true); if [ -n "$translation_json" ] && echo "$translation_json" | jq -e . >/dev/null 2>&1; then translated_text=$(echo "$translation_json" | jq -r '.responseData.translatedText'); if [ -n "$translated_text" ] && [ "$translated_text" != "NO QUERY SPECIFIED!" ] && [ "$translated_text" != "$advice_en" ]; then advice_vi="$translated_text"; fi; fi; advice_line="$advice_vi"; fi
          holiday_discord_status=$(curl -o /dev/null -s -w "%{http_code}" "https://date.nager.at/api/v3/IsTodayPublicHoliday/VN" || true)
          holiday_line=""; if [ "$holiday_discord_status" -eq 200 ]; then holiday_line="üéâ Ch√∫c m·ª´ng! H√¥m nay l√† ng√†y ngh·ªâ l·ªÖ."; fi
          echo "weather_field_value=$weather_line" >> $GITHUB_OUTPUT; echo "uv_field_value=$uv_line" >> $GITHUB_OUTPUT; echo "advice_field_value=$advice_line" >> $GITHUB_OUTPUT; echo "holiday_field_value=$holiday_line" >> $GITHUB_OUTPUT

      - name: Commit v√† ƒë·∫©y code l√™n repo (n·∫øu c√≥ thay ƒë·ªïi)
        id: commit_step
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --cached --quiet; then
            echo "changes=true" >> $GITHUB_OUTPUT; git config user.name "${{ github.actor }}"; git config user.email "${{ github.actor }}@users.noreply.github.com"; git commit -m "üìù C·∫≠p nh·∫≠t nh·∫≠t k√Ω t·ª± ƒë·ªông ng√†y $(date +%F)"; git push
          else
            echo "changes=false" >> $GITHUB_OUTPUT; echo "Kh√¥ng c√≥ g√¨ thay ƒë·ªïi ƒë·ªÉ commit."
          fi

      - name: G·ª≠i th√¥ng b√°o ƒë·∫øn Discord
        if: steps.commit_step.outputs.changes == 'true'
        shell: bash
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          WEATHER_DATA: ${{ steps.update_file.outputs.weather_field_value }}
          UV_DATA: ${{ steps.update_file.outputs.uv_field_value }}
          ADVICE_DATA: ${{ steps.update_file.outputs.advice_field_value }}
          HOLIDAY_DATA: ${{ steps.update_file.outputs.holiday_field_value }}
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then echo "C·∫£nh b√°o: DISCORD_WEBHOOK_URL secret ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. B·ªè qua vi·ªác g·ª≠i th√¥ng b√°o."; exit 0; fi
          
          # X√°c ƒë·ªãnh t√™n file cho Discord notification
          today_discord=$(date +%F)
          current_hour_discord=$(date +%H)
          if [ "$current_hour_discord" -ge 0 ] && [ "$current_hour_discord" -lt 12 ]; then
            time_suffix_discord="12AM"
          else
            time_suffix_discord="12PM"
          fi
          
          file_url="https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/DailyNotes/$today_discord-$time_suffix_discord.md"
          # T·∫°o title v·ªõi th·ªùi gian
          if [ "$current_hour_discord" -ge 0 ] && [ "$current_hour_discord" -lt 12 ]; then
            time_display="üåÖ S√°ng"
          else
            time_display="üåá Tr∆∞a"
          fi
          
          description="File nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c th√¥ng tin m·ªõi nh·∫•t. [Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ xem chi ti·∫øt]($file_url)"
          json_payload=$(jq -n --arg title "üìù Nh·∫≠t K√Ω $time_display: $(date +'%d/%m/%Y')" --arg url "$file_url" --arg description "$description" --arg weather_value "$WEATHER_DATA" --arg uv_value "$UV_DATA" --arg advice_value "$ADVICE_DATA" --arg holiday_value "$HOLIDAY_DATA" '{"username": "Nh·∫≠t K√Ω Bot","avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png","embeds": [{"title": $title,"url": $url,"description": $description,"color": 3447003,"fields": [{ "name": "üå§Ô∏è Th·ªùi ti·∫øt (${{ env.CITY }})", "value": $weather_value, "inline": true },{ "name": "‚òÄÔ∏è Ch·ªâ s·ªë UV", "value": $uv_value, "inline": true },{ "name": "üí° L·ªùi khuy√™n ng·∫Øn", "value": $advice_value, "inline": false }],"footer": { "text": "C·∫≠p nh·∫≠t l√∫c" },"timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")'"}]} | .embeds[0].fields += (if $holiday_value != "" then [{ "name": "üáªüá≥ Ng√†y L·ªÖ Vi·ªát Nam", "value": $holiday_value, "inline": false }] else [] end)')
          curl -H "Content-Type: application/json" -d "$json_payload" "$DISCORD_WEBHOOK_URL"
