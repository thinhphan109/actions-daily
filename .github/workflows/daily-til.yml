name: Nh·∫≠t K√Ω T·ª± ƒê·ªông H√≥a H√†ng Ng√†y

on:
  schedule:
    # Ch·∫°y v√†o 00:05 gi·ªù Vi·ªát Nam m·ªói ng√†y (17:05 UTC)
    - cron: '5 17 * * *'
  workflow_dispatch: # Cho ph√©p ch·∫°y th·ªß c√¥ng

permissions:
  contents: write

concurrency:
  group: daily-note
  cancel-in-progress: true

jobs:
  create-daily-note:
    runs-on: ubuntu-latest
    env:
      CITY: "Ho Chi Minh"
      LAT: "10.82"
      LON: "106.63"
      TZ: Asia/Ho_Chi_Minh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: C·∫≠p nh·∫≠t n·ªôi dung t·ª± ƒë·ªông
        id: update_file
        shell: bash
        run: |
          set -euo pipefail
          
          today=$(date +%F)
          file="$today.md"

          if ! command -v jq >/dev/null 2>&1 || ! command -v bc >/dev/null 2>&1; then
            echo "Installing missing tools (jq, bc)..."
            sudo apt-get update -y && sudo apt-get install -y jq bc
          fi

          # ========================================================================
          # === ƒê·ªäNH NGHƒ®A C√ÅC H√ÄM MODULE ==========================================
          # ========================================================================

          function append_header() {
            if [ ! -f "$file" ]; then
              printf '# üöÄ Nh·∫≠t K√Ω T·ª± ƒê·ªông H√≥a - %s\n' "$today" > "$file"
            fi
          }

          function append_calendar() {
            if ! grep -q '<!-- CALENDAR-MODULE -->' "$file"; then
              dow_num=$(date +%u); case "$dow_num" in 1) dow="Th·ª© Hai" ;; 2) dow="Th·ª© Ba" ;; 3) dow="Th·ª© T∆∞" ;; 4) dow="Th·ª© NƒÉm" ;; 5) dow="Th·ª© S√°u" ;; 6) dow="Th·ª© B·∫£y" ;; 7) dow="Ch·ªß Nh·∫≠t" ;; esac
              iso_week=$(date +%V); day_of_year=$(date +%j)
              { echo; echo "---"; echo "<!-- CALENDAR-MODULE -->"; echo "## üóìÔ∏è L·ªãch H√¥m Nay"; echo "- **Ng√†y**: $today ($dow)"; echo "- **Tu·∫ßn (ISO)**: $iso_week / **Ng√†y trong nƒÉm**: $day_of_year"; } >> "$file"
            fi
          }

          function append_holiday_check() {
            if ! grep -q '<!-- HOLIDAY-MODULE -->' "$file"; then
              status_code=$(curl -o /dev/null -s -w "%{http_code}" "https://date.nager.at/api/v3/IsTodayPublicHoliday/VN" || true)
              holiday_info=""
              if [ "$status_code" -eq 200 ]; then
                holiday_info="- **Th√¥ng b√°o**: üéâ H√¥m nay l√† m·ªôt ng√†y ngh·ªâ l·ªÖ t·∫°i Vi·ªát Nam."
              elif [ "$status_code" -eq 204 ]; then
                holiday_info="- **Th√¥ng b√°o**: H√¥m nay kh√¥ng ph·∫£i l√† ng√†y ngh·ªâ l·ªÖ."
              fi
              if [ -n "$holiday_info" ]; then
                { echo; echo "<!-- HOLIDAY-MODULE -->"; echo "## üáªüá≥ Ng√†y L·ªÖ Vi·ªát Nam"; echo "$holiday_info"; } >> "$file"
              fi
            fi
          }

          function append_weather_and_uv() {
            if ! grep -q '<!-- WEATHER-UV-MODULE -->' "$file"; then
              wjson=$(curl -fsSL "https://api.open-meteo.com/v1/forecast?latitude=${LAT}&longitude=${LON}&current_weather=true&daily=uv_index_max&timezone=Asia%2FHo_Chi_Minh" || true)
              if [ -n "$wjson" ] && echo "$wjson" | jq -e . >/dev/null 2>&1; then
                temp=$(echo "$wjson" | jq -r '.current_weather.temperature // empty'); wind=$(echo "$wjson" | jq -r '.current_weather.windspeed // empty');
                uv_index=$(echo "$wjson" | jq -r '.daily.uv_index_max[0] // empty' | cut -d'.' -f1)
                { echo; echo "---"; echo "<!-- WEATHER-UV-MODULE -->"; echo "## üå§Ô∏è Th·ªùi ti·∫øt & Ch·ªâ s·ªë UV t·∫°i ${CITY}"; echo "- **Nhi·ªát ƒë·ªô**: ${temp}¬∞C / **Gi√≥**: ${wind} km/h"; if [ -n "$uv_index" ]; then echo "- **Ch·ªâ s·ªë UV**: $uv_index"; fi; } >> "$file"
              fi
            fi
          }

          function append_financial_data() {
            if ! grep -q '<!-- FINANCE-MODULE -->' "$file"; then
              ratejson=$(curl --connect-timeout 5 -fsSL "https://open.er-api.com/v6/latest/USD" || true)
              goldjson=$(curl --connect-timeout 5 -fsSL "https://vapi.vnappmob.com/api/v2/gold" || true)
              usd_vnd_rate="ƒêang c·∫≠p nh·∫≠t..."; gold_sell="ƒêang c·∫≠p nh·∫≠t..."
              if [ -n "$ratejson" ] && echo "$ratejson" | jq -e . >/dev/null 2>&1; then
                  rate_raw=$(echo "$ratejson" | jq -r '.rates.VND')
                  if [ -n "$rate_raw" ] && [ "$rate_raw" != "null" ]; then
                      usd_vnd_rate=$(printf "%.0f" "$rate_raw")
                  fi
              fi
              if [ -n "$goldjson" ] && echo "$goldjson" | jq -e '.results | length > 0' >/dev/null 2>&1; then
                  gold_sell_raw=$(echo "$goldjson" | jq -r '.results[] | select(.name | contains("SJC")) | .sell' | head -n 1)
                  if [ -n "$gold_sell_raw" ] && [ "$gold_sell_raw" != "null" ]; then
                      gold_sell_formatted=$(printf "%.3f" $(echo "$gold_sell_raw / 1000000" | bc -l))
                      gold_sell="${gold_sell_formatted} tri·ªáu"
                  fi
              else
                  echo "C·∫£nh b√°o: Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu gi√° v√†ng ho·∫∑c API tr·∫£ v·ªÅ r·ªóng."
              fi
              { echo; echo "---"; echo "<!-- FINANCE-MODULE -->"; echo "## üí∞ D·ªØ li·ªáu t√†i ch√≠nh"; echo "- **T·ª∑ gi√° USD/VND**: 1 USD ‚âà $usd_vnd_rate VND"; echo "- **V√†ng SJC (b√°n ra)**: $gold_sell / l∆∞·ª£ng"; } >> "$file"
            fi
          }

          function append_crypto_prices() {
            if ! grep -q '<!-- CRYPTO-MODULE -->' "$file"; then
              COIN_IDS="bitcoin,ethereum,solana,binancecoin,ripple,dogecoin,tether"
              cryptojson=$(curl -fsSL "https://api.coingecko.com/api/v3/simple/price?ids=${COIN_IDS}&vs_currencies=usd" || true)
              if [ -n "$cryptojson" ] && echo "$cryptojson" | jq -e . >/dev/null 2>&1; then
                output=""
                btc_price_raw=$(echo "$cryptojson" | jq -r '.bitcoin.usd'); if [ -n "$btc_price_raw" ] && [ "$btc_price_raw" != "null" ]; then btc_price=$(printf "%.2f" "$btc_price_raw"); output+="- **Bitcoin (BTC)**: \$${btc_price} USD\n"; fi
                eth_price_raw=$(echo "$cryptojson" | jq -r '.ethereum.usd'); if [ -n "$eth_price_raw" ] && [ "$eth_price_raw" != "null" ]; then eth_price=$(printf "%.2f" "$eth_price_raw"); output+="- **Ethereum (ETH)**: \$${eth_price} USD\n"; fi
                sol_price_raw=$(echo "$cryptojson" | jq -r '.solana.usd'); if [ -n "$sol_price_raw" ] && [ "$sol_price_raw" != "null" ]; then sol_price=$(printf "%.2f" "$sol_price_raw"); output+="- **Solana (SOL)**: \$${sol_price} USD\n"; fi
                bnb_price_raw=$(echo "$cryptojson" | jq -r '.binancecoin.usd'); if [ -n "$bnb_price_raw" ] && [ "$bnb_price_raw" != "null" ]; then bnb_price=$(printf "%.2f" "$bnb_price_raw"); output+="- **BNB**: \$${bnb_price} USD\n"; fi
                xrp_price_raw=$(echo "$cryptojson" | jq -r '.ripple.usd'); if [ -n "$xrp_price_raw" ] && [ "$xrp_price_raw" != "null" ]; then xrp_price=$(printf "%.4f" "$xrp_price_raw"); output+="- **XRP**: \$${xrp_price} USD\n"; fi
                doge_price_raw=$(echo "$cryptojson" | jq -r '.dogecoin.usd'); if [ -n "$doge_price_raw" ] && [ "$doge_price_raw" != "null" ]; then doge_price=$(printf "%.4f" "$doge_price_raw"); output+="- **Dogecoin (DOGE)**: \$${doge_price} USD\n"; fi
                usdt_price_raw=$(echo "$cryptojson" | jq -r '.tether.usd'); if [ -n "$usdt_price_raw" ] && [ "$usdt_price_raw" != "null" ]; then usdt_price=$(printf "%.4f" "$usdt_price_raw"); output+="- **Tether (USDT)**: \$${usdt_price} USD\n"; fi
                output=$(echo -e "${output}" | sed '/^$/d')
                { echo; echo "---"; echo "<!-- CRYPTO-MODULE -->"; echo "## üìà Gi√° Ti·ªÅn M√£ H√≥a"; echo -e "$output"; } >> "$file"
              fi
            fi
          }

          function append_iss_location() {
            if ! grep -q '<!-- ISS-MODULE -->' "$file"; then
              issjson=$(curl -fsSL "http://api.open-notify.org/iss-now.json" || true)
              if [ -n "$issjson" ] && echo "$issjson" | jq -e . >/dev/null 2>&1; then
                lat=$(echo "$issjson" | jq -r '.iss_position.latitude'); lon=$(echo "$issjson" | jq -r '.iss_position.longitude')
                geo_json=$(curl -fsSL "https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=en" || true)
                location="Tr√™n ƒë·∫°i d∆∞∆°ng ho·∫∑c khu v·ª±c kh√¥ng x√°c ƒë·ªãnh"
                if [ -n "$geo_json" ] && echo "$geo_json" | jq -e . >/dev/null 2>&1; then
                  country=$(echo "$geo_json" | jq -r '.countryName // empty'); city=$(echo "$geo_json" | jq -r '.city // empty'); principalSubdivision=$(echo "$geo_json" | jq -r '.principalSubdivision // empty')
                  if [ -n "$country" ]; then location="$country"; if [ -n "$principalSubdivision" ]; then location="$principalSubdivision, $location"; fi; if [ -n "$city" ]; then location="$city, $location"; fi; fi
                fi
                { echo; echo "---"; echo "<!-- ISS-MODULE -->"; echo "## üõ∞Ô∏è V·ªã Tr√≠ Tr·∫°m ISS"; echo "- **V·ªã tr√≠ hi·ªán t·∫°i**: $location"; echo "- **T·ªça ƒë·ªô**: $lat, $lon"; } >> "$file"
              fi
            fi
          }

          function append_rocket_launch() {
            if ! grep -q '<!-- LAUNCH-MODULE -->' "$file"; then
              launchjson=$(curl -fsSL "https://ll.thespacedevs.com/2.2.0/launch/upcoming/?limit=1" || true)
              if [ -n "$launchjson" ] && echo "$launchjson" | jq -e '.results | length > 0' >/dev/null 2>&1; then
                launch=$(echo "$launchjson" | jq '.results[0]'); name=$(echo "$launch" | jq -r '.name'); mission=$(echo "$launch" | jq -r '.mission.name'); iso_date=$(echo "$launch" | jq -r '.window_start')
                launch_time=$(date -d "$iso_date" +"%d/%m/%Y, %H:%M (Gi·ªù Vi·ªát Nam)")
                { echo; echo "---"; echo "<!-- LAUNCH-MODULE -->"; echo "## üöÄ L·ªãch Ph√≥ng T√™n L·ª≠a"; echo "- **T√™n l·ª≠a**: $name"; echo "- **Nhi·ªám v·ª•**: $mission"; echo "- **Th·ªùi gian d·ª± ki·∫øn**: $launch_time"; } >> "$file"
              fi
            fi
          }

          function append_advice() {
            if ! grep -q '<!-- ADVICE-MODULE -->' "$file"; then
              advice_en_json=$(curl -fsSL "https://api.adviceslip.com/advice" || true)
              if [ -n "$advice_en_json" ] && echo "$advice_en_json" | jq -e . >/dev/null 2>&1; then
                advice_en=$(echo "$advice_en_json" | jq -r '.slip.advice'); advice_vi="$advice_en"; advice_en_encoded=$(echo "$advice_en" | sed 's/ /%20/g')
                translation_json=$(curl -fsSL "https://api.mymemory.translated.net/get?q=${advice_en_encoded}&langpair=en|vi" || true)
                if [ -n "$translation_json" ] && echo "$translation_json" | jq -e . >/dev/null 2>&1; then
                  translated_text=$(echo "$translation_json" | jq -r '.responseData.translatedText'); if [ -n "$translated_text" ] && [ "$translated_text" != "NO QUERY SPECIFIED!" ] && [ "$translated_text" != "$advice_en" ]; then advice_vi="$translated_text"; fi
                fi
                { echo; echo "---"; echo "<!-- ADVICE-MODULE -->"; echo "## üí° L·ªùi khuy√™n ng·∫Øn"; echo "> $advice_vi"; } >> "$file"
              fi
            fi
          }

          function append_numbers_fact() {
            if ! grep -q '<!-- NUMBERS-MODULE -->' "$file"; then
              numjson_en=$(curl -fsSL "http://numbersapi.com/random/trivia?json" || true)
              if [ -n "$numjson_en" ] && echo "$numjson_en" | jq -e . >/dev/null 2>&1; then
                fact_en=$(echo "$numjson_en" | jq -r '.text'); fact_vi="$fact_en"; fact_en_encoded=$(echo "$fact_en" | sed 's/ /%20/g')
                translation_json=$(curl -fsSL "https://api.mymemory.translated.net/get?q=${fact_en_encoded}&langpair=en|vi" || true)
                if [ -n "$translation_json" ] && echo "$translation_json" | jq -e . >/dev/null 2>&1; then
                  translated_text=$(echo "$translation_json" | jq -r '.responseData.translatedText'); if [ -n "$translated_text" ] && [ "$translated_text" != "NO QUERY SPECIFIED!" ] && [ "$translated_text" != "$fact_en" ]; then fact_vi="$translated_text"; fi
                fi
                { echo; echo "---"; echo "<!-- NUMBERS-MODULE -->"; echo "## #Ô∏è‚É£ S·ª± Th·∫≠t V·ªÅ Con S·ªë"; echo "> $fact_vi"; } >> "$file"
              fi
            fi
          }
          
          function append_footer() {
            if ! grep -q '<!-- FOOTER-MODULE -->' "$file"; then
              { echo; echo "---"; echo "<!-- FOOTER-MODULE -->"; echo "> *Ghi ch√∫ n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi [GitHub Actions](https://github.com/features/actions).*" ; } >> "$file"
            fi
          }

          # ========================================================================
          # === G·ªåI C√ÅC H√ÄM ƒê·ªÇ TH√äM N·ªòI DUNG =======================================
          # ========================================================================
          echo "B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t file: $file"
          append_header
          append_calendar
          append_holiday_check
          append_weather_and_uv
          append_financial_data
          append_crypto_prices
          append_iss_location
          append_rocket_launch
          append_numbers_fact
          append_advice
          append_footer
          echo "Ho√†n th√†nh c·∫≠p nh·∫≠t n·ªôi dung."
          
          git add "$file"
          
          # ========================================================================
          # === T·∫†O D·ªÆ LI·ªÜU CHO TH√îNG B√ÅO DISCORD ==================================
          # ========================================================================
          echo "ƒêang t·∫°o t√≥m t·∫Øt cho Discord..."
          wjson_discord=$(curl -fsSL "https://api.open-meteo.com/v1/forecast?latitude=${LAT}&longitude=${LON}&current_weather=true&daily=uv_index_max&timezone=Asia%2FHo_Chi_Minh" || true)
          weather_line="Th·ªùi ti·∫øt: ƒêang c·∫≠p nh·∫≠t..."; uv_line="Ch·ªâ s·ªë UV: ƒêang c·∫≠p nh·∫≠t..."
          if [ -n "$wjson_discord" ] && echo "$wjson_discord" | jq -e . >/dev/null 2>&1; then
            temp=$(echo "$wjson_discord" | jq -r '.current_weather.temperature // empty'); wind=$(echo "$wjson_discord" | jq -r '.current_weather.windspeed // empty');
            weather_line="Nhi·ªát ƒë·ªô: ${temp}¬∞C, gi√≥ ${wind} km/h"
            uv_index=$(echo "$wjson_discord" | jq -r '.daily.uv_index_max[0] // empty' | cut -d'.' -f1); if [ -n "$uv_index" ]; then uv_line="Cao nh·∫•t: $uv_index"; fi
          fi

          advice_discord_json=$(curl -fsSL "https://api.adviceslip.com/advice" || true)
          advice_line="H√¥m nay l√† m·ªôt ng√†y tuy·ªát v·ªùi!"
          if [ -n "$advice_discord_json" ] && echo "$advice_discord_json" | jq -e . >/dev/null 2>&1; then
            advice_en=$(echo "$advice_discord_json" | jq -r '.slip.advice'); advice_vi="$advice_en"; advice_en_encoded=$(echo "$advice_en" | sed 's/ /%20/g')
            translation_json=$(curl -fsSL "https://api.mymemory.translated.net/get?q=${advice_en_encoded}&langpair=en|vi" || true)
            if [ -n "$translation_json" ] && echo "$translation_json" | jq -e . >/dev/null 2>&1; then
              translated_text=$(echo "$translation_json" | jq -r '.responseData.translatedText'); if [ -n "$translated_text" ] && [ "$translated_text" != "NO QUERY SPECIFIED!" ] && [ "$translated_text" != "$advice_en" ]; then advice_vi="$translated_text"; fi
            fi
            advice_line="$advice_vi"
          fi

          holiday_discord_status=$(curl -o /dev/null -s -w "%{http_code}" "https://date.nager.at/api/v3/IsTodayPublicHoliday/VN" || true)
          holiday_line=""
          if [ "$holiday_discord_status" -eq 200 ]; then
            holiday_line="üéâ Ch√∫c m·ª´ng! H√¥m nay l√† ng√†y ngh·ªâ l·ªÖ."
          fi

          # Xu·∫•t d·ªØ li·ªáu ra GITHUB_OUTPUT ƒë·ªÉ b∆∞·ªõc sau c√≥ th·ªÉ s·ª≠ d·ª•ng
          echo "weather_field_value=$weather_line" >> $GITHUB_OUTPUT
          echo "uv_field_value=$uv_line" >> $GITHUB_OUTPUT
          echo "advice_field_value=$advice_line" >> $GITHUB_OUTPUT
          echo "holiday_field_value=$holiday_line" >> $GITHUB_OUTPUT

      - name: Commit v√† ƒë·∫©y code l√™n repo (n·∫øu c√≥ thay ƒë·ªïi)
        id: commit_step
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --cached --quiet; then
            echo "changes=true" >> $GITHUB_OUTPUT
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git commit -m "üìù C·∫≠p nh·∫≠t nh·∫≠t k√Ω t·ª± ƒë·ªông ng√†y $(date +%F)"
            git push
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "Kh√¥ng c√≥ g√¨ thay ƒë·ªïi ƒë·ªÉ commit."
          fi

      - name: G·ª≠i th√¥ng b√°o ƒë·∫øn Discord
        if: steps.commit_step.outputs.changes == 'true'
        shell: bash
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          WEATHER_DATA: ${{ steps.update_file.outputs.weather_field_value }}
          UV_DATA: ${{ steps.update_file.outputs.uv_field_value }}
          ADVICE_DATA: ${{ steps.update_file.outputs.advice_field_value }}
          HOLIDAY_DATA: ${{ steps.update_file.outputs.holiday_field_value }}
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "C·∫£nh b√°o: DISCORD_WEBHOOK_URL secret ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. B·ªè qua vi·ªác g·ª≠i th√¥ng b√°o."
            exit 0
          fi
          
          file_url="https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/$(date +%F).md"
          
          # T·∫†O BI·∫æN M√î T·∫¢ TRONG BASH ƒê·ªÇ TR√ÅNH L·ªñI JQ
          description="File nh·∫≠t k√Ω ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c th√¥ng tin m·ªõi nh·∫•t. [Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ xem chi ti·∫øt]($file_url)"

          # X√¢y d·ª±ng payload JSON b·∫±ng jq
          json_payload=$(jq -n \
            --arg title "üìù Nh·∫≠t K√Ω Ng√†y M·ªõi: $(date +'%d/%m/%Y')" \
            --arg url "$file_url" \
            --arg description "$description" \
            --arg weather_value "$WEATHER_DATA" \
            --arg uv_value "$UV_DATA" \
            --arg advice_value "$ADVICE_DATA" \
            --arg holiday_value "$HOLIDAY_DATA" \
            '
            {
              "username": "Nh·∫≠t K√Ω Bot",
              "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "embeds": [{
                "title": $title,
                "url": $url,
                "description": $description,
                "color": 3447003,
                "fields": [
                  { "name": "üå§Ô∏è Th·ªùi ti·∫øt (${{ env.CITY }})", "value": $weather_value, "inline": true },
                  { "name": "‚òÄÔ∏è Ch·ªâ s·ªë UV", "value": $uv_value, "inline": true },
                  { "name": "üí° L·ªùi khuy√™n ng·∫Øn", "value": $advice_value, "inline": false }
                ],
                "footer": { "text": "C·∫≠p nh·∫≠t l√∫c" },
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")'"
              }]
            }
            | .embeds[0].fields += (if $holiday_value != "" then [{ "name": "üáªüá≥ Ng√†y L·ªÖ Vi·ªát Nam", "value": $holiday_value, "inline": false }] else [] end)
            ')

          curl -H "Content-Type: application/json" -d "$json_payload" "$DISCORD_WEBHOOK_URL"

