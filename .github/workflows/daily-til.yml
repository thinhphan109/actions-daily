name: Nh·∫≠t K√Ω T·ª± ƒê·ªông H√≥a H√†ng Ng√†y

on:
  schedule:
    # Ch·∫°y v√†o 00:05 gi·ªù Vi·ªát Nam m·ªói ng√†y (17:05 UTC)
    - cron: '5 17 * * *'
  workflow_dispatch: # Cho ph√©p ch·∫°y th·ªß c√¥ng

permissions:
  contents: write

concurrency:
  group: daily-note
  cancel-in-progress: true

jobs:
  create-daily-note:
    runs-on: ubuntu-latest
    env:
      CITY: "Ho Chi Minh"
      LAT: "10.82"
      LON: "106.63"
      TZ: Asia/Ho_Chi_Minh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: C·∫≠p nh·∫≠t n·ªôi dung t·ª± ƒë·ªông
        shell: bash
        run: |
          set -euo pipefail
          
          today=$(date +%F)
          file="$today.md"

          if ! command -v jq >/dev/null 2>&1 || ! command -v bc >/dev/null 2>&1; then
            echo "Installing missing tools (jq, bc)..."
            sudo apt-get update -y && sudo apt-get install -y jq bc
          fi

          # ========================================================================
          # === ƒê·ªäNH NGHƒ®A C√ÅC H√ÄM MODULE ==========================================
          # ========================================================================

          function append_header() {
            if [ ! -f "$file" ]; then
              printf '# üöÄ Nh·∫≠t K√Ω T·ª± ƒê·ªông H√≥a - %s\n' "$today" > "$file"
            fi
          }

          function append_calendar() {
            if ! grep -q '<!-- CALENDAR-MODULE -->' "$file"; then
              dow_num=$(date +%u); case "$dow_num" in 1) dow="Th·ª© Hai" ;; 2) dow="Th·ª© Ba" ;; 3) dow="Th·ª© T∆∞" ;; 4) dow="Th·ª© NƒÉm" ;; 5) dow="Th·ª© S√°u" ;; 6) dow="Th·ª© B·∫£y" ;; 7) dow="Ch·ªß Nh·∫≠t" ;; esac
              iso_week=$(date +%V); day_of_year=$(date +%j)
              { echo; echo "---"; echo "<!-- CALENDAR-MODULE -->"; echo "## üóìÔ∏è L·ªãch H√¥m Nay"; echo "- **Ng√†y**: $today ($dow)"; echo "- **Tu·∫ßn (ISO)**: $iso_week / **Ng√†y trong nƒÉm**: $day_of_year"; } >> "$file"
            fi
          }

          function append_weather_and_uv() {
            if ! grep -q '<!-- WEATHER-UV-MODULE -->' "$file"; then
              wjson=$(curl -fsSL "https://api.open-meteo.com/v1/forecast?latitude=${LAT}&longitude=${LON}&current_weather=true&daily=uv_index_max&timezone=Asia%2FHo_Chi_Minh" || true)
              if [ -n "$wjson" ] && echo "$wjson" | jq -e . >/dev/null 2>&1; then
                temp=$(echo "$wjson" | jq -r '.current_weather.temperature // empty'); wind=$(echo "$wjson" | jq -r '.current_weather.windspeed // empty');
                uv_index=$(echo "$wjson" | jq -r '.daily.uv_index_max[0] // empty' | cut -d'.' -f1)
                { echo; echo "---"; echo "<!-- WEATHER-UV-MODULE -->"; echo "## üå§Ô∏è Th·ªùi ti·∫øt & Ch·ªâ s·ªë UV t·∫°i ${CITY}"; echo "- **Nhi·ªát ƒë·ªô**: ${temp}¬∞C / **Gi√≥**: ${wind} km/h"; if [ -n "$uv_index" ]; then echo "- **Ch·ªâ s·ªë UV**: $uv_index"; fi; } >> "$file"
              fi
            fi
          }
          
          function append_cve_news() {
            if ! grep -q '<!-- CVE-MODULE -->' "$file"; then
              cvejson=$(curl -fsSL "https://cve.circl.lu/api/last" || true)
              if [ -n "$cvejson" ] && echo "$cvejson" | jq -e '.[0]' >/dev/null 2>&1; then
                latest_cve=$(echo "$cvejson" | jq '.[0]')
                cve_id=$(echo "$latest_cve" | jq -r '.id')
                cve_summary=$(echo "$latest_cve" | jq -r '.summary')
                { echo; echo "---"; echo "<!-- CVE-MODULE -->"; echo "## üõ°Ô∏è C·∫£nh B√°o An Ninh M·∫°ng (CVE)"; echo "- **M√£ l·ªói**: $cve_id"; echo "- **T√≥m t·∫Øt**: $cve_summary"; } >> "$file"
              fi
            fi
          }
          
          function append_word_of_the_day() {
            if ! grep -q '<!-- WORD-MODULE -->' "$file"; then
              word=$(curl -fsSL "https://random-word-api.herokuapp.com/word" | jq -r '.[0]')
              if [ -n "$word" ]; then
                defjson=$(curl -fsSL "https://api.dictionaryapi.dev/api/v2/entries/en/${word}" || true)
                if [ -n "$defjson" ] && ! echo "$defjson" | jq -e '.title == "No Definitions Found"'; then
                  definition=$(echo "$defjson" | jq -r '.[0].meanings[0].definitions[0].definition // empty')
                  phonetic=$(echo "$defjson" | jq -r '.[0].phonetic // ""')
                  { echo; echo "---"; echo "<!-- WORD-MODULE -->"; echo "## ‚úçÔ∏è T·ª´ V·ª±ng Truy·ªÅn C·∫£m H·ª©ng"; echo "- **T·ª´**: \`$word\` ($phonetic)"; echo "- **ƒê·ªãnh nghƒ©a**: $definition"; } >> "$file"
                fi
              fi
            fi
          }

          function append_game_quote() {
            if ! grep -q '<!-- GAME-QUOTE-MODULE -->' "$file"; then
              gamejson=$(curl -fsSL "https://gaming-quotes.vercel.app/api/random" || true)
              if [ -n "$gamejson" ] && echo "$gamejson" | jq -e . >/dev/null 2>&1; then
                quote=$(echo "$gamejson" | jq -r '.quote')
                author=$(echo "$gamejson" | jq -r '.author')
                { echo; echo "---"; echo "<!-- GAME-QUOTE-MODULE -->"; echo "## üí¨ Tr√≠ch D·∫´n T·ª´ Th·∫ø Gi·ªõi Game"; echo "> \"$quote\""; echo ">"; echo "> ‚Äî ***$author***"; } >> "$file"
              fi
            fi
          }

          function append_art_of_the_day() {
            if ! grep -q '<!-- ART-MODULE -->' "$file"; then
              pagination_json=$(curl -fsSL "https://api.artic.edu/api/v1/artworks/search?query[term][is_public_domain]=true&fields=id&limit=1" || true)
              if [ -n "$pagination_json" ] && echo "$pagination_json" | jq -e . >/dev/null 2>&1; then
                total_pages=$(echo "$pagination_json" | jq -r '.pagination.total_pages // 1000')
                random_page=$((1 + RANDOM % total_pages))
                artjson=$(curl -fsSL "https://api.artic.edu/api/v1/artworks/search?query[term][is_public_domain]=true&fields=id,title,artist_display,image_id&limit=1&page=${random_page}" || true)
                if [ -n "$artjson" ] && [ "$(echo "$artjson" | jq -r '.data | length')" -gt 0 ]; then
                  artwork=$(echo "$artjson" | jq '.data[0]')
                  title=$(echo "$artwork" | jq -r '.title'); artist=$(echo "$artwork" | jq -r '.artist_display' | sed 's/<[^>]*>//g' | cut -d ',' -f 1 | head -n 1); image_id=$(echo "$artwork" | jq -r '.image_id')
                  if [ "$image_id" != "null" ]; then
                    image_url="https://www.artic.edu/iiif/2/${image_id}/full/843,/0/default.jpg"
                    { echo; echo "---"; echo "<!-- ART-MODULE -->"; echo "## üñºÔ∏è T√°c Ph·∫©m Ngh·ªá Thu·∫≠t Trong Ng√†y"; echo "- **T√™n**: $title"; echo "- **T√°c gi·∫£**: $artist"; echo "![${title}](${image_url})"; } >> "$file"
                  fi
                fi
              fi
            fi
          }

          function append_footer() {
            if ! grep -q '<!-- FOOTER-MODULE -->' "$file"; then
              { echo; echo "---"; echo "<!-- FOOT-MODULE -->"; echo "> *Ghi ch√∫ n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi [GitHub Actions](https://github.com/features/actions).*" ; } >> "$file"
            fi
          }

          # ========================================================================
          # === G·ªåI C√ÅC H√ÄM ƒê·ªÇ TH√äM N·ªòI DUNG =======================================
          # ========================================================================
          echo "B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t file: $file"
          append_header
          append_calendar
          append_weather_and_uv
          append_cve_news
          append_word_of_the_day
          append_game_quote
          append_art_of_the_day
          append_footer
          echo "Ho√†n th√†nh c·∫≠p nh·∫≠t n·ªôi dung."
          
          git add "$file"

      - name: Commit v√† ƒë·∫©y code l√™n repo (n·∫øu c√≥ thay ƒë·ªïi)
        id: commit_step
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --cached --quiet; then
            echo "changes=true" >> $GITHUB_OUTPUT
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git commit -m "üìù C·∫≠p nh·∫≠t nh·∫≠t k√Ω t·ª± ƒë·ªông ng√†y $(date +%F)"
            git push
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "Kh√¥ng c√≥ g√¨ thay ƒë·ªïi ƒë·ªÉ commit."
          fi

      - name: G·ª≠i th√¥ng b√°o ƒë·∫øn Discord
        if: steps.commit_step.outputs.changes == 'true'
        shell: bash
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "C·∫£nh b√°o: DISCORD_WEBHOOK_URL secret ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. B·ªè qua vi·ªác g·ª≠i th√¥ng b√°o."
            exit 0
          fi
          
          file_url="https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/$(date +%F).md"
          
          json_payload=$(jq -n \
            --arg title "üìù Nh·∫≠t K√Ω T·ª± ƒê·ªông H√≥a - $(date +%F)" \
            --arg url "$file_url" \
            --arg description "File nh·∫≠t k√Ω cho ng√†y h√¥m nay ƒë√£ ƒë∆∞·ª£c t·∫°o v√† c·∫≠p nh·∫≠t th√†nh c√¥ng. [Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ xem]($file_url)" \
            '{
              "username": "GitHub Actions Bot",
              "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "embeds": [{
                "title": $title,
                "url": $url,
                "description": $description,
                "color": 3447003,
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")'"
              }]
            }')

          curl -H "Content-Type: application/json" -d "$json_payload" "$DISCORD_WEBHOOK_URL"

